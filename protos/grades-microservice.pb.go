// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.28.3
// source: grades-microservice.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Student Id
type StudentId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StudentId) Reset() {
	*x = StudentId{}
	mi := &file_grades_microservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentId) ProtoMessage() {}

func (x *StudentId) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentId.ProtoReflect.Descriptor instead.
func (*StudentId) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{0}
}

func (x *StudentId) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StudentId) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

// ExamGrade is a single Exam grade message.
type ExamGrade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Course        string                 `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	ExamType      string                 `protobuf:"bytes,2,opt,name=exam_type,json=examType,proto3" json:"exam_type,omitempty"`
	Grade         string                 `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExamGrade) Reset() {
	*x = ExamGrade{}
	mi := &file_grades_microservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamGrade) ProtoMessage() {}

func (x *ExamGrade) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamGrade.ProtoReflect.Descriptor instead.
func (*ExamGrade) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{1}
}

func (x *ExamGrade) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *ExamGrade) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *ExamGrade) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

// HomeworkGrade is a single Homework grade message.
type HomeworkGrade struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Course         string                 `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	HomeworkNumber string                 `protobuf:"bytes,2,opt,name=homework_number,json=homeworkNumber,proto3" json:"homework_number,omitempty"`
	Grade          string                 `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HomeworkGrade) Reset() {
	*x = HomeworkGrade{}
	mi := &file_grades_microservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HomeworkGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeworkGrade) ProtoMessage() {}

func (x *HomeworkGrade) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeworkGrade.ProtoReflect.Descriptor instead.
func (*HomeworkGrade) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{2}
}

func (x *HomeworkGrade) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

func (x *HomeworkGrade) GetHomeworkNumber() string {
	if x != nil {
		return x.HomeworkNumber
	}
	return ""
}

func (x *HomeworkGrade) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

// StudentCourseGrades represent all specific course grades for a student.
type StudentCourseGrades struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId      string                 `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Exams         []*ExamGrade           `protobuf:"bytes,3,rep,name=exams,proto3" json:"exams,omitempty"`
	Homeworks     []*HomeworkGrade       `protobuf:"bytes,4,rep,name=homeworks,proto3" json:"homeworks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StudentCourseGrades) Reset() {
	*x = StudentCourseGrades{}
	mi := &file_grades_microservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentCourseGrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentCourseGrades) ProtoMessage() {}

func (x *StudentCourseGrades) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentCourseGrades.ProtoReflect.Descriptor instead.
func (*StudentCourseGrades) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{3}
}

func (x *StudentCourseGrades) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentCourseGrades) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *StudentCourseGrades) GetExams() []*ExamGrade {
	if x != nil {
		return x.Exams
	}
	return nil
}

func (x *StudentCourseGrades) GetHomeworks() []*HomeworkGrade {
	if x != nil {
		return x.Homeworks
	}
	return nil
}

// StudentGrades represent all grades for a student.
type StudentGrades struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Courses       []*StudentCourseGrades `protobuf:"bytes,2,rep,name=courses,proto3" json:"courses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StudentGrades) Reset() {
	*x = StudentGrades{}
	mi := &file_grades_microservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentGrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentGrades) ProtoMessage() {}

func (x *StudentGrades) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentGrades.ProtoReflect.Descriptor instead.
func (*StudentGrades) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{4}
}

func (x *StudentGrades) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentGrades) GetCourses() []*StudentCourseGrades {
	if x != nil {
		return x.Courses
	}
	return nil
}

// Empty message could be used later to validate the request.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_grades_microservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{5}
}

// GetCourseGradesRequest is a request message to get grades of all students enrolled in a specific course.
type GetCourseGradesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CourseId      string                 `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseGradesRequest) Reset() {
	*x = GetCourseGradesRequest{}
	mi := &file_grades_microservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseGradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseGradesRequest) ProtoMessage() {}

func (x *GetCourseGradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseGradesRequest.ProtoReflect.Descriptor instead.
func (*GetCourseGradesRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{6}
}

func (x *GetCourseGradesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCourseGradesRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// GetCourseGradesResponse is a response message for all students grades enrolled in a specific course.
type GetCourseGradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Grades        []*StudentCourseGrades `protobuf:"bytes,1,rep,name=grades,proto3" json:"grades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseGradesResponse) Reset() {
	*x = GetCourseGradesResponse{}
	mi := &file_grades_microservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseGradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseGradesResponse) ProtoMessage() {}

func (x *GetCourseGradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseGradesResponse.ProtoReflect.Descriptor instead.
func (*GetCourseGradesResponse) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{7}
}

func (x *GetCourseGradesResponse) GetGrades() []*StudentCourseGrades {
	if x != nil {
		return x.Grades
	}
	return nil
}

// GetStudentCourseGradesRequest is a request message to get a specific student grades in specific course.
type GetStudentCourseGradesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId      string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStudentCourseGradesRequest) Reset() {
	*x = GetStudentCourseGradesRequest{}
	mi := &file_grades_microservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCourseGradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCourseGradesRequest) ProtoMessage() {}

func (x *GetStudentCourseGradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCourseGradesRequest.ProtoReflect.Descriptor instead.
func (*GetStudentCourseGradesRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{8}
}

func (x *GetStudentCourseGradesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetStudentCourseGradesRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetStudentCourseGradesRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

// GetStudentCourseGradesResponse is a response message for a specific student grades in specific course.
type GetStudentCourseGradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseGrades  *StudentCourseGrades   `protobuf:"bytes,1,opt,name=course_grades,json=courseGrades,proto3" json:"course_grades,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStudentCourseGradesResponse) Reset() {
	*x = GetStudentCourseGradesResponse{}
	mi := &file_grades_microservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStudentCourseGradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudentCourseGradesResponse) ProtoMessage() {}

func (x *GetStudentCourseGradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudentCourseGradesResponse.ProtoReflect.Descriptor instead.
func (*GetStudentCourseGradesResponse) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{9}
}

func (x *GetStudentCourseGradesResponse) GetCourseGrades() *StudentCourseGrades {
	if x != nil {
		return x.CourseGrades
	}
	return nil
}

// AddHomeworkGradeRequest is a request message to add a homework grade for a student in specific course.
type AddHomeworkGradeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId      string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId       string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	HomeworkNumber string                 `protobuf:"bytes,4,opt,name=homework_number,json=homeworkNumber,proto3" json:"homework_number,omitempty"`
	Grade          string                 `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddHomeworkGradeRequest) Reset() {
	*x = AddHomeworkGradeRequest{}
	mi := &file_grades_microservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddHomeworkGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHomeworkGradeRequest) ProtoMessage() {}

func (x *AddHomeworkGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHomeworkGradeRequest.ProtoReflect.Descriptor instead.
func (*AddHomeworkGradeRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{10}
}

func (x *AddHomeworkGradeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddHomeworkGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *AddHomeworkGradeRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *AddHomeworkGradeRequest) GetHomeworkNumber() string {
	if x != nil {
		return x.HomeworkNumber
	}
	return ""
}

func (x *AddHomeworkGradeRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

// UpdateHomeworkGradeRequest is a request message to update a homework grade for a student in specific course.
type UpdateHomeworkGradeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId      string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId       string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	HomeworkNumber string                 `protobuf:"bytes,4,opt,name=homework_number,json=homeworkNumber,proto3" json:"homework_number,omitempty"`
	Grade          string                 `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateHomeworkGradeRequest) Reset() {
	*x = UpdateHomeworkGradeRequest{}
	mi := &file_grades_microservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHomeworkGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHomeworkGradeRequest) ProtoMessage() {}

func (x *UpdateHomeworkGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHomeworkGradeRequest.ProtoReflect.Descriptor instead.
func (*UpdateHomeworkGradeRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHomeworkGradeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateHomeworkGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *UpdateHomeworkGradeRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *UpdateHomeworkGradeRequest) GetHomeworkNumber() string {
	if x != nil {
		return x.HomeworkNumber
	}
	return ""
}

func (x *UpdateHomeworkGradeRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

// AddExamGradeRequest is a request message to add an exam grade for a student in specific course.
type AddExamGradeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId      string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	ExamType      string                 `protobuf:"bytes,4,opt,name=exam_type,json=examType,proto3" json:"exam_type,omitempty"`
	Grade         string                 `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddExamGradeRequest) Reset() {
	*x = AddExamGradeRequest{}
	mi := &file_grades_microservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddExamGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExamGradeRequest) ProtoMessage() {}

func (x *AddExamGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExamGradeRequest.ProtoReflect.Descriptor instead.
func (*AddExamGradeRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{12}
}

func (x *AddExamGradeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddExamGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *AddExamGradeRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *AddExamGradeRequest) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *AddExamGradeRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

// UpdateExamGradeRequest is a request message to update an exam grade for a student in specific course.
type UpdateExamGradeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId      string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	ExamType      string                 `protobuf:"bytes,4,opt,name=exam_type,json=examType,proto3" json:"exam_type,omitempty"`
	Grade         string                 `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExamGradeRequest) Reset() {
	*x = UpdateExamGradeRequest{}
	mi := &file_grades_microservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExamGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamGradeRequest) ProtoMessage() {}

func (x *UpdateExamGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamGradeRequest.ProtoReflect.Descriptor instead.
func (*UpdateExamGradeRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateExamGradeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateExamGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *UpdateExamGradeRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *UpdateExamGradeRequest) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *UpdateExamGradeRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

// DeleteHomeworkGradeRequest is a request message to delete a homework grade for a student in specific course.
type DeleteHomeworkGradeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId      string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId       string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	HomeworkNumber string                 `protobuf:"bytes,4,opt,name=homework_number,json=homeworkNumber,proto3" json:"homework_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteHomeworkGradeRequest) Reset() {
	*x = DeleteHomeworkGradeRequest{}
	mi := &file_grades_microservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHomeworkGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHomeworkGradeRequest) ProtoMessage() {}

func (x *DeleteHomeworkGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHomeworkGradeRequest.ProtoReflect.Descriptor instead.
func (*DeleteHomeworkGradeRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteHomeworkGradeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeleteHomeworkGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *DeleteHomeworkGradeRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *DeleteHomeworkGradeRequest) GetHomeworkNumber() string {
	if x != nil {
		return x.HomeworkNumber
	}
	return ""
}

// DeleteExamGradeRequest is a request message to delete an exam grade for a student in specific course.
type DeleteExamGradeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CourseId      string                 `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	ExamType      string                 `protobuf:"bytes,4,opt,name=exam_type,json=examType,proto3" json:"exam_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteExamGradeRequest) Reset() {
	*x = DeleteExamGradeRequest{}
	mi := &file_grades_microservice_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExamGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamGradeRequest) ProtoMessage() {}

func (x *DeleteExamGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grades_microservice_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamGradeRequest.ProtoReflect.Descriptor instead.
func (*DeleteExamGradeRequest) Descriptor() ([]byte, []int) {
	return file_grades_microservice_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteExamGradeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeleteExamGradeRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *DeleteExamGradeRequest) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *DeleteExamGradeRequest) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

var File_grades_microservice_proto protoreflect.FileDescriptor

var file_grades_microservice_proto_rawDesc = []byte{
	0x0a, 0x19, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x09, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x09, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x66, 0x0a,
	0x0d, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x78, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x65, 0x78, 0x61,
	0x6d, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x48,
	0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x65, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x06, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x87, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0xa2, 0x05, 0x0a, 0x0d, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0x15, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x2e,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x1e, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x30,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x47, 0x52, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2d, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grades_microservice_proto_rawDescOnce sync.Once
	file_grades_microservice_proto_rawDescData = file_grades_microservice_proto_rawDesc
)

func file_grades_microservice_proto_rawDescGZIP() []byte {
	file_grades_microservice_proto_rawDescOnce.Do(func() {
		file_grades_microservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_grades_microservice_proto_rawDescData)
	})
	return file_grades_microservice_proto_rawDescData
}

var file_grades_microservice_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_grades_microservice_proto_goTypes = []any{
	(*StudentId)(nil),                      // 0: grades.StudentId
	(*ExamGrade)(nil),                      // 1: grades.ExamGrade
	(*HomeworkGrade)(nil),                  // 2: grades.HomeworkGrade
	(*StudentCourseGrades)(nil),            // 3: grades.StudentCourseGrades
	(*StudentGrades)(nil),                  // 4: grades.StudentGrades
	(*Empty)(nil),                          // 5: grades.Empty
	(*GetCourseGradesRequest)(nil),         // 6: grades.GetCourseGradesRequest
	(*GetCourseGradesResponse)(nil),        // 7: grades.GetCourseGradesResponse
	(*GetStudentCourseGradesRequest)(nil),  // 8: grades.GetStudentCourseGradesRequest
	(*GetStudentCourseGradesResponse)(nil), // 9: grades.GetStudentCourseGradesResponse
	(*AddHomeworkGradeRequest)(nil),        // 10: grades.AddHomeworkGradeRequest
	(*UpdateHomeworkGradeRequest)(nil),     // 11: grades.UpdateHomeworkGradeRequest
	(*AddExamGradeRequest)(nil),            // 12: grades.AddExamGradeRequest
	(*UpdateExamGradeRequest)(nil),         // 13: grades.UpdateExamGradeRequest
	(*DeleteHomeworkGradeRequest)(nil),     // 14: grades.DeleteHomeworkGradeRequest
	(*DeleteExamGradeRequest)(nil),         // 15: grades.DeleteExamGradeRequest
}
var file_grades_microservice_proto_depIdxs = []int32{
	1,  // 0: grades.StudentCourseGrades.exams:type_name -> grades.ExamGrade
	2,  // 1: grades.StudentCourseGrades.homeworks:type_name -> grades.HomeworkGrade
	3,  // 2: grades.StudentGrades.courses:type_name -> grades.StudentCourseGrades
	3,  // 3: grades.GetCourseGradesResponse.grades:type_name -> grades.StudentCourseGrades
	3,  // 4: grades.GetStudentCourseGradesResponse.course_grades:type_name -> grades.StudentCourseGrades
	6,  // 5: grades.GradesService.GetCourseGrades:input_type -> grades.GetCourseGradesRequest
	8,  // 6: grades.GradesService.GetStudentCourseGrades:input_type -> grades.GetStudentCourseGradesRequest
	0,  // 7: grades.GradesService.GetStudentGrades:input_type -> grades.StudentId
	10, // 8: grades.GradesService.AddHomeworkGrade:input_type -> grades.AddHomeworkGradeRequest
	12, // 9: grades.GradesService.AddExamGrade:input_type -> grades.AddExamGradeRequest
	11, // 10: grades.GradesService.UpdateHomeworkGrade:input_type -> grades.UpdateHomeworkGradeRequest
	13, // 11: grades.GradesService.UpdateExamGrade:input_type -> grades.UpdateExamGradeRequest
	14, // 12: grades.GradesService.DeleteHomeworkGrade:input_type -> grades.DeleteHomeworkGradeRequest
	15, // 13: grades.GradesService.DeleteExamGrade:input_type -> grades.DeleteExamGradeRequest
	7,  // 14: grades.GradesService.GetCourseGrades:output_type -> grades.GetCourseGradesResponse
	9,  // 15: grades.GradesService.GetStudentCourseGrades:output_type -> grades.GetStudentCourseGradesResponse
	4,  // 16: grades.GradesService.GetStudentGrades:output_type -> grades.StudentGrades
	5,  // 17: grades.GradesService.AddHomeworkGrade:output_type -> grades.Empty
	5,  // 18: grades.GradesService.AddExamGrade:output_type -> grades.Empty
	5,  // 19: grades.GradesService.UpdateHomeworkGrade:output_type -> grades.Empty
	5,  // 20: grades.GradesService.UpdateExamGrade:output_type -> grades.Empty
	5,  // 21: grades.GradesService.DeleteHomeworkGrade:output_type -> grades.Empty
	5,  // 22: grades.GradesService.DeleteExamGrade:output_type -> grades.Empty
	14, // [14:23] is the sub-list for method output_type
	5,  // [5:14] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_grades_microservice_proto_init() }
func file_grades_microservice_proto_init() {
	if File_grades_microservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grades_microservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grades_microservice_proto_goTypes,
		DependencyIndexes: file_grades_microservice_proto_depIdxs,
		MessageInfos:      file_grades_microservice_proto_msgTypes,
	}.Build()
	File_grades_microservice_proto = out.File
	file_grades_microservice_proto_rawDesc = nil
	file_grades_microservice_proto_goTypes = nil
	file_grades_microservice_proto_depIdxs = nil
}
